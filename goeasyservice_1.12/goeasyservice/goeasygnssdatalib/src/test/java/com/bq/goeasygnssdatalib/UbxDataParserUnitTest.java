package com.bq.goeasygnssdatalib;

import android.util.Log;

import com.bq.goeasygnssdatalib.ubxdata.UbxDataGroup;
import com.bq.goeasygnssdatalib.ubxdata.NavSat;
import com.bq.goeasygnssdatalib.ubxdata.NavTimegal;
import com.bq.goeasygnssdatalib.ubxdata.ParserUtils;
import com.bq.goeasygnssdatalib.gnssdata.GnssData;
import com.google.common.io.BaseEncoding;

import org.testng.annotations.Test;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;

import static com.bq.goeasygnssdatalib.ubxdata.UbxDataParser.*;
import static org.junit.Assert.assertEquals;


public class UbxDataParserUnitTest {

    static String TAG = "TEST";

    @Test
    public void parseNavTimegalTest() {

        UbxDataGroup ubxDataGroup = new UbxDataGroup();

        ubxDataGroup.navTimegal = (NavTimegal) parseNavTimegal(
                "A0E7C91704170600CE1800002B041103103A3101");

        Log.i(TAG, ubxDataGroup.navTimegal.toString());

        assertEquals(399108000, ubxDataGroup.navTimegal.iTOW);

    }


    //B56201353800A0E7C91701040000000B00A50000000001000000000C00A50000000001000000001817A50000000004000000001918A500000000140900000846

    // header(2) class+id(2) length(2) iTOW(4)
    // B5 62     01 35       38 00     A0 E7 C9 17

    // version(1) numSvs(1) reserved1(2)
    // 01         04        00 00

    // gnssId(1) svId(1) cno(1) elev(1) azim(2) prRes(2) flags(4)
    // 00        0B      00     A5      00 00   00 00    01 00 00 00
    // 00        0C      00     A5      00 00   00 00    01 00 00 00
    // 00        18      17     A5      00 00   00 00    04 00 00 00
    // 00        19      18     A5      00 00   00 00    14 09 00 00

    // chs(2)
    // 08 46

    @Test
    public void parseNavSatTest() {

        UbxDataGroup ubxDataGroup = new UbxDataGroup();

        ubxDataGroup.navSat = (NavSat) parseNavSat(
                "A0E7C91701040000000B00A50000000001000000000C00A50000000001000000001817A50000000004000000001918A50000000014090000");

        Log.i(TAG, ubxDataGroup.navSat.toString());

        assertEquals(399108000, ubxDataGroup.navSat.iTOW);

    }


    @Test
    public void parseMessageTest() {

        UbxDataGroup ubxDataGroup = new UbxDataGroup();

        ubxDataGroup = parseGnssDataStringubxDataGroup);

        Log.i(TAG, ubxDataGroup.toString());

    }

    // B562 0135 D400 C0FB50110111000000011C3E3D0114001F09000000031329DD000000141200000008003B910000001112000000161943E10072001C0900

    @Test
    public void returnGnssData() {

        UbxDataGroup ubxDataGroup = new UbxDataGroup();

        ubxDataGroup = parseGnssDataString("B5620135D400C0FB50110111000000011C3E3D0114001F09000000031329DD000000141200000008003B910000001112000000161943E10072001C0900", ubxDataGroup);

        GnssData gnssData = new GnssData(ubxDataGroup);

        Log.i(TAG, ubxDataGroup.toString());

        Log.i(TAG, gnssData.toString());

        Log.i(TAG, "" + gnssData.getGalileoAuth()[0].getDataIntegers());

        Log.i(TAG, "" + Arrays.toString(gnssData.getGalileoAuth()[0].getData()));


    }

    // Checking dwrd data conversion from hex string to two's complement, and removing unnecessary bytes
    @Test
    public void getTwosComplementArray() {

        String input = "06FFFFFFFE00000012183489E243C00089E280000000002AAAAA7E46CAFF400000000001";

        ArrayList<Integer> desiredResult = new ArrayList<>(
                Arrays.asList(6, -1, -1, -1, -2, 0, 0, 0, 18, 24, 52, -119, -30, 67, -64, 0, -119, -30, -128, 0, 0, 0, 0, 42, -86, -86, 126, 70, -54, -1, 64, 0, 0, 0, 0, 1));

        ArrayList<Integer> result = ParserUtils.getTwosComplementArray(input);

        assertEquals(result, desiredResult);

        Log.i(TAG, input);
        Log.i(TAG, result.toString());
    }



    @Test
    public void hex2Bin() {

        String input = "FFFFFFFF";

        Log.i(TAG, input);

        Log.i(TAG,  "" + ParserUtils.hexToUnsignedLong(input, 4));
        Log.i(TAG,  "" + ParserUtils.hexToSignedLong(input, 4));


    }

}